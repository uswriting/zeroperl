#!/usr/bin/env python3
"""
wasic - WASI Compiler Wrapper
Handles compilation requests, either building for host (test programs and native tools)
or targeting WASI (actual build)
"""
import os
import sys
import shlex
from subprocess import check_call, CalledProcessError, DEVNULL

def is_test_compile(args):
    """Detect if this is a test compilation (like from Configure)"""
    source_files = [arg for arg in args if arg.endswith('.c')]
    return any('try' in f or 'test' in f for f in source_files)

def is_native_build():
    """Check if we're in the native build phase"""
    return os.getenv('PERL_NATIVE_BUILD') == '1'

def compile_for_host(args):
    """Compile using host compiler"""
    cmd = ['cc'] + args
    print(f"Host compile: {' '.join(cmd)}", file=sys.stderr)
    try:
        check_call(cmd)
        return 0
    except CalledProcessError as e:
        return e.returncode

def compile_for_wasi(args):
    """Compile using WASI SDK"""
    wasi_sdk_path = os.getenv('WASI_SDK_PATH', '/opt/wasi-sdk')
    wasi_sysroot = os.path.join(wasi_sdk_path, 'share/wasi-sysroot')
    
    # Add setjmp support flags with LTO enabled
    extra_flags = [
        "--target=wasm32-wasi",
        "-flto=full",
        "-w",
        "-mllvm", "-wasm-enable-sjlj",
        "-Wl,-mllvm,-wasm-enable-sjlj",  # Linker flag for LTO
        "-lsetjmp"
    ]
    
    cmd = [
        f"{wasi_sdk_path}/bin/clang",
        f"--sysroot={wasi_sysroot}",
    ] + extra_flags + args
    
    print(f"WASI compile: {' '.join(cmd)}", file=sys.stderr)
    try:
        check_call(cmd)
        return 0
    except CalledProcessError:
        return None  # Return None to indicate failure without printing error

def main():
    if len(sys.argv) < 2:
        print("Usage: wasic [compiler flags and source files]", file=sys.stderr)
        return 1
    
    args = sys.argv[1:]
    
    # If we're in native build mode, always use host compiler
    if is_native_build():
        return compile_for_host(args)
    
    # For test compiles, try WASI first to detect features
    if is_test_compile(args):
        try:
            cmd = [
                f"{os.getenv('WASI_SDK_PATH', '/opt/wasi-sdk')}/bin/clang",
                f"--sysroot={os.getenv('WASI_SDK_PATH', '/opt/wasi-sdk')}/share/wasi-sysroot",
                "--target=wasm32-wasi",
                "-w"
            ] + args
            check_call(cmd, stderr=DEVNULL)
            print("Test compile succeeded with WASI, building host executable", file=sys.stderr)
            # If WASI succeeded, compile for host to get test executable
            return compile_for_host(args)
        except CalledProcessError:
            print("Test compile failed with WASI", file=sys.stderr)
            return 1
    
    # For non-test compiles in non-native mode, use WASI
    return compile_for_wasi(args)

if __name__ == '__main__':
    sys.exit(main())
