import os
import sys
import logging
from subprocess import check_call, CalledProcessError

# Configure logging
logger = logging.getLogger('wasic')
logging.basicConfig(level=logging.INFO, format='%(message)s')

class BuildMode:
    WASI = "wasi"
    HOST = "host"

def run_command(cmd):
    try:
        logger.debug(f"Running command: {' '.join(cmd)}")
        check_call(cmd)
    except CalledProcessError as e:
        logger.error(f"Command failed with return code {e.returncode}")
        sys.exit(e.returncode)

def compile_for_wasi(args):
    wasi_sdk_path = os.getenv('WASI_SDK_PATH', '/opt/wasi-sdk')
    wasi_sysroot = os.path.join(wasi_sdk_path, 'share/wasi-sysroot')

    compiler = 'clang++' if any(arg.endswith('.cpp') for arg in args) else 'clang'

    cmd = [
        os.path.join(wasi_sdk_path, 'bin', compiler),
        f"--sysroot={wasi_sysroot}"
    ] + args

    logger.info(f"Compiling for WASI: {' '.join(cmd)}")
    run_command(cmd)

def compile_for_host(args):
    wasi_sdk_path = os.getenv('WASI_SDK_PATH', '/opt/wasi-sdk')

    # Use clang from the WASI SDK with host-targeting flags
    compiler = 'clang++' if any(arg.endswith('.cpp') for arg in args) else 'clang'

    # Adjust the target for your host platform
    host_target = os.getenv('HOST_TARGET', 'x86_64-linux-gnu')  # Update as needed for your host

    cmd = [
        os.path.join(wasi_sdk_path, 'bin', compiler),
        f"--target={host_target}",
        "-O2"
    ] + args

    logger.info(f"Compiling for host: {' '.join(cmd)}")
    run_command(cmd)

def determine_build_mode(args):
    # Detect if "try.c" is being compiled
    for arg in args:
        if arg.endswith('try.c'):
            return BuildMode.HOST
    return BuildMode.WASI

def parse_args():
    if len(sys.argv) < 2:
        logger.error("Usage: wasic [compiler flags and source files]")
        sys.exit(1)

    return sys.argv[1:]

def main():
    args = parse_args()
    build_mode = determine_build_mode(args)

    if build_mode == BuildMode.HOST:
        compile_for_host(args)
    else:
        compile_for_wasi(args)

if __name__ == '__main__':
    main()
