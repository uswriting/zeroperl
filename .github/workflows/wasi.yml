name: perlwasi

on: workflow_dispatch

env:
  URLPERL: https://www.cpan.org/src/5.0/perl-5.40.0.tar.gz
  WASI_SDK_VERSION: 25.0
  # Adjust WASI_SDK_VERSION if you want a different version. For reference:
  # https://github.com/WebAssembly/wasi-sdk/releases

jobs:
  perlwasi:
    runs-on: ubuntu-22.04

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install Binaryen
        run: |
          curl -L https://github.com/WebAssembly/binaryen/releases/download/version_121/binaryen-version_121-x86_64-linux.tar.gz -o binaryen.tar.gz
          tar -xzf binaryen.tar.gz
          sudo cp binaryen-version_121/bin/* /opt/
          rm -rf binaryen.tar.gz binaryen-version_121
          echo "/opt" >> $GITHUB_PATH
      - name: Test Binaryen Installation
        run: wasm-opt --version


      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64

      - name: Setup `wasmtime`
        uses: bytecodealliance/actions/wasmtime/setup@v1

      - name: Run `wasmtime version`
        run: "wasmtime --version"

      - name: Install WASI SDK
        shell: bash
        run: |
          # Create directory for WASI SDK
          sudo mkdir -p /opt/wasi-sdk
          
          # Set variables for WASI SDK installation
          WASI_OS=linux
          WASI_ARCH=x86_64
          WASI_VERSION=25
          WASI_VERSION_FULL=${WASI_VERSION}.0
          
          # Download and extract WASI SDK
          cd /tmp
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION_FULL}-${WASI_ARCH}-${WASI_OS}.tar.gz
          sudo tar xvf wasi-sdk-${WASI_VERSION_FULL}-${WASI_ARCH}-${WASI_OS}.tar.gz -C /opt/wasi-sdk --strip-components=1
          
          # Verify installation
          ls -la /opt/wasi-sdk/bin
          
          # Make available in the current job
          echo "WASI_SDK_PATH=/opt/wasi-sdk" >> $GITHUB_ENV
          echo "PATH=/opt/wasi-sdk/bin:$PATH" >> $GITHUB_ENV
      - name: Confirm clang version
        shell: bash
        run: |
          clang --version || true
          /opt/wasi-sdk/bin/clang --version || true
      - name: Install Perl (native, static)
        shell: bash
        run: |
          # We'll build a "native" perl in order to generate host tools that help cross-compile.
          # This is not the final WASI buildâ€”just a standard local build for the host.
          
          mkdir native
          curl -L $URLPERL | tar -xzf - --strip-components=1 --directory=native
          cd native
          
          # Configure for a native static build (on Ubuntu). We keep dynamic loading disabled for simplicity.
          sh +x ./Configure -sde -Dman1dir=none -Dman3dir=none -Dprefix="$PWD/prefix" -Dusedevel -Uversiononly -Dlibs="-lpthread -ldl -lm -lutil -lc -lz" -Dstatic_ext="mro Devel/Peek File/DosGlob File/Glob Sys/Syslog Sys/Hostname PerlIO/via PerlIO/mmap PerlIO/encoding B attributes Unicode/Normalize Unicode/Collate threads threads/shared IPC/SysV re Digest/MD5 Digest/SHA SDBM_File Math/BigInt/FastCalc Data/Dumper I18N/Langinfo Time/HiRes Time/Piece IO Socket Hash/Util/FieldHash Hash/Util Filter/Util/Call POSIX Encode/Unicode Encode Encode/JP Encode/KR Encode/EBCDIC Encode/CN Encode/Symbol Encode/Byte Encode/TW Compress/Raw/Zlib Compress/Raw/Bzip2 MIME/Base64 Cwd Storable List/Util Fcntl Opcode" #-Dextras="App::cpanminus"
          make
          make install
      - name: Install ExifTool and Dependencies (native)
        shell: bash
        run: |
          export PATH="$PWD/native/prefix/bin:$PATH"
          curl -L https://www.exiftool.org/Image-ExifTool-13.11.tar.gz | tar -xzf -
          cd Image-ExifTool-13.11
          perl Makefile.PL
          make
          make test
          make install PREFIX="$PWD/../native/prefix"
      - name: Create WASI hint file
        shell: bash
        run: |
          cat <<'EOF' > hintfile_wasi.sh
            # fix bizarre preprocessor bug
            
            d_perl_lc_all_category_positions_init='define'
            d_perl_lc_all_separator='undef'
            d_perl_lc_all_uses_name_value_pairs='undef'
            perl_lc_all_category_positions_init='{ 0, 1, 5, 2, 3, 4 }'
            perl_lc_all_separator=''
            
            #TODO: almost all of the known_extensions are still being built. we should probably exclude some of them! (see also nonxs_ext)
            #noextensions='IPC/SysV'
            # Here's a fun one: apparently, when building perlmini.c, emcc notices that it's a symlink to perl.c, and compiles to perl.o
            # (because there is no -o option), so the final perl ends up thinking it's miniperl (shown in "perl -v", @INC doesn't work, etc.).
            # Because of this and other issues I've had with symlinks, I'm switching to hard links instead.
            # (Another possible fix might be to fix the Makefile steps so that they use the -o option, but this solution works for now.)
            #TODO Later: In NODEFS, does Perl's -e test work correctly on symlinks? (./t/TEST was having issues detecting ./t/perl, a symlink to ./perl).
            usemymalloc="n"
            usemultiplicity="define"
            usenm='undef'
            usemallocwrap="define"
            d_procselfexe='undef'
            d_dlopen='undef'
            # Disable wait-related features
            d_wait='undef'
            d_waitpid='undef'
            d_wait3='undef'
            d_wait4='undef'
            i_syswait='undef'    # This tells perl not to include sys/wait.h
      
            i_grp='define'
            i_pwd='define'
            d_getpwnam='undef'
            d_getpwent='undef'
            d_getpwuid='undef' 
            d_getspnam='undef'
            d_getpwnam_r='undef'
            d_getpwent_r='undef'
            d_getpwuid_r='undef'
            d_getprpwnam='undef'
            d_setpwent='undef'
            d_setpwent_r='undef'
            d_getgrnam='undef'
            d_getgrgid='undef'
            d_getgrent='undef'
            d_getgrnam_r='undef'
            d_getgrgid_r='undef'
            d_getgrent_r='undef'
            d_setgrent='undef'
            d_setgrent_r='undef'
            d_endgrent='undef'
            d_endgrent_r='undef'
            d_getuid='undef'
            d_geteuid='undef'
            d_getgid='undef'
            d_getegid='undef'
        
            uselargefiles='define'
            use64bitint='define'
            useperlio='define'
            usethreads='undef'
            use64bitall='undef'

            d_off64_t='define'
            use_off64_t='define'
            d_statfs_s='define'
            d_fstatfs='define'
            d_statfs_s='define'
            d_fstatfs='define'
            d_stat='define'
            d_fstat='define'
            d_lstat='define'
            d_statblks='define'
            d_fstat64='define'
            d_fdclose='undef'
            d_dirnamlen='undef'
            Off_t='off64_t'
      
            longsize='4'
            longlongsize='8'
            ivtype='long long'
            lseeksize='8'
            lseektype='off64_t'
            st_ino_size='8'
            st_size_size='8'


            
            d_setrgid='undef'
            d_setruid='undef'
            d_setproctitle='undef'
            d_malloc_size='undef'
            d_malloc_good_size='undef'
        
            #d_prctl='define' # hm, it's present in the libc source, but Configure shows Emscripten error output? -> for now, assume it's not available
            # It *looks* like shm*, sem* and a few others exist in Emscripten's libc,
            # but I'm not sure why Configure isn't detecting them. But at the moment I'm not going
            # to worry about them, and just not build IPC-SysV.
            d_clearenv='undef'
            d_cuserid='undef'
            d_eaccess='undef'
            d_getspnam='undef'
            d_msgctl='undef'
            d_msgget='undef'
            d_msgrcv='undef'
            d_msgsnd='undef'
            d_semget='undef'
            d_semop='undef'
            d_shmat='undef'
            d_shmctl='undef'
            d_shmdt='undef'
            d_shmget='undef'
            d_syscall='undef'

            
            # Emscripten does not have signals support (documentation isn't 100% clear on this? but see "$EMSCRIPTEN/system/include/libc/setjmp.h")
            # but if you do: grep -r 'Calling stub instead of' "$EMSCRIPTEN"
            # you'll see the unsupported stuff (as of 1.37.35):
            # signal() sigaction() sigprocmask() __libc_current_sigrtmin __libc_current_sigrtmax kill() killpg() siginterrupt() raise() pause()
            # plus: "Calling longjmp() instead of siglongjmp()"
            #d_sigaction='undef'
            #d_sigprocmask='undef'
            d_killpg='undef'
            d_pause='undef'
            #d_sigsetjmp='undef' # this also disables Perl's use of siglongjmp() (see config.h)
            # the others either aren't used by Perl (like siginterrupt) or can't be Configure'd (like kill)
            #TODO Later: currently I've disabled Perl's use of signal() by patching the source - maybe there's a better way?
            # Emscripten doesn't actually have these either (see "$EMSCRIPTEN/src/library.js")
            d_wait4='undef'
            d_waitpid='undef'
            d_vfork='undef'
            d_pseudofork='undef'
            i_pthread='undef'
            d_pthread_atfork='undef'
            d_pthread_attr_setscope='undef'
            d_pthread_yield='undef'
            #TODO Later: The test for "selectminbits" seems to fail, the error appears to be coming from this line (because apparently stream.stream_ops is undefined): https://github.com/kripken/emscripten/blob/ddfc3e32f65/src/library_syscall.js#L750 For now, just use this number from a build with an earlier version where this didn't fail:
            #selectminbits='32'
            #alignbytes='4'
            noextensions='Socket POSIX Time/HiRes'
            # The WASI sysroot is typically set in the environment or through clang flags.
            # The WASI sysroot is typically set in the environment or through clang flags.
            ldflags='-static -mllvm -wasm-enable-sjlj -lwasi-emulated-signal -lwasi-emulated-getpid -lwasi-emulated-process-clocks -lwasi-emulated-mman'
            ccflags='$ccflags -DMULTIPLICITY -DUSE_PERLIO -mllvm -wasm-enable-sjlj -Wno-implicit-function-declaration -D_WASI_EMULATED_PROCESS_CLOCKS -lwasi-emulated-process-clocks -D_WASI_EMULATED_GETPID -lwasi-emulated-getpid -D_GNU_SOURCE -DNO_MATHOMS -Wno-null-pointer-arithmetic -D_WASI_EMULATED_SIGNAL -lwasi-emulated-signal -include /opt/wasi-sdk/share/wasi-sysroot/include/wasm32-wasi/fcntl.h -I${{ github.workspace }}/stubs'
            cppflags='-lm -mllvm -wasm-enable-sjlj -Wno-implicit-function-declaration -D_WASI_EMULATED_PROCESS_CLOCKS -lwasi-emulated-process-clocks -D_WASI_EMULATED_GETPID -lwasi-emulated-getpid -D_LARGEFILE64_SOURCE -D_GNU_SOURCE -DSTANDARD_C -DPERL_USE_SAFE_PUTENV -D_WASI_EMULATED_SIGNAL -lwasi-emulated-signal -DNO_MATHOMS -Wno-null-pointer-arithmetic -fno-strict-aliasing -pipe -fstack-protector-strong -include /opt/wasi-sdk/share/wasi-sysroot/include/wasm32-wasi/fcntl.h -I${{ github.workspace }}/stubs'
          EOF
      - name: Install Perl (WASI build)
        shell: bash
        run: |
          WASI_BIN=$PWD/wasi-bin
          chmod +x $WASI_BIN/wasic $WASI_BIN/wasimake $WASI_BIN/wasiconfigure
          export WASI_SDK_PATH=/opt/wasi-sdk
          export PATH="$WASI_BIN:$PATH"
          
          mkdir wasm
          curl -L $URLPERL | tar -xzf - --strip-components=1 --directory=wasm
          cp hintfile_wasi.sh wasm/hints/wasi.sh
          cd wasm
          chmod u+w ./ext/File-Glob/bsd_glob.c && patch ./ext/File-Glob/bsd_glob.c ${{ github.workspace }}/patches/glob.patch && chmod u-w ./ext/File-Glob/bsd_glob.c
          chmod u+w ./Configure && patch ./Configure ${{ github.workspace }}/patches/Configure.patch && chmod u-w ./Configure
   
          wasiconfigure sh ./Configure -sde \
            -Dinc_version_list=none \
            -Ddlsrc=none \
            -Dloclibpth='' \
            -Dglibpth='' \
            -Dlns='/bin/ln' \
            -Dman1dir=none \
            -Dman3dir=none \
            -Dosname="wasi" \
            -Darchname="wasm32-wasi" \
            -Dosvers="wasi${WASI_SDK_VERSION}" \
            -Dmyhostname='objex.ai' \
            -Dmydomain='objex.ai' \
            -Dperladmin=root \
            -Dcc="wasic" \
            -Dld="wasic" \
            -Dar="${WASI_SDK_PATH}/bin/llvm-ar" \
            -Dranlib="${WASI_SDK_PATH}/bin/llvm-ranlib" \
            -Doptimize="-O2" \
            -Dlibs='-lm' \
            -Dhintfile=wasi \
            -Dhostperl="$PWD/../native/miniperl" \
            -Dhostgenerate="$PWD/../native/generate_uudmap" \
            -Dprefix="$PWD/prefix" \
            -Dsysroot="${WASI_SDK_PATH}/share/wasi-sysroot" \
            -Dstatic_ext="mro Devel/Peek File/DosGlob File/Glob Sys/Syslog Sys/Hostname PerlIO/via PerlIO/mmap PerlIO/encoding B attributes Unicode/Normalize Unicode/Collate threads threads/shared IPC/SysV re Digest/MD5 Digest/SHA SDBM_File Math/BigInt/FastCalc Data/Dumper I18N/Langinfo Time/Piece IO Hash/Util/FieldHash Hash/Util Filter/Util/Call Encode/Unicode Encode Encode/JP Encode/KR Encode/EBCDIC Encode/CN Encode/Symbol Encode/Byte Encode/TW Compress/Raw/Zlib Compress/Raw/Bzip2 MIME/Base64 Cwd Storable List/Util Fcntl Opcode"
          ln -s $PWD/pod/perldelta.pod .
          ln $PWD/README.* ..
          wasimake make utilities PERL="$PWD/../native/miniperl"
          wasimake make RUN_PERL="$PWD/../native/miniperl -Ilib -I."
          wasimake make install
          echo "MAKED NOW LINK THIS BITCH"
          cat perlmain.c || "No main"
          # Final linking step
          #find ./prefix -type f -executable -o -name '*.so' -name '*.a' -o -name '*.ld' -o -name '*.pod' -o -name '*.h' -delete
          #find ./prefix

          wasic -c ${{ github.workspace }}/stubs/stubs.c -o stubs.o

          cp ${{ github.workspace }}/stubs/wasiperl.c . && wasic -c wasiperl.c -o wasiperl.o -I. \
            -mllvm -wasm-enable-sjlj \
            -lsetjmp \
            -D_WASI_EMULATED_PROCESS_CLOCKS -lwasi-emulated-process-clocks \
            -D_WASI_EMULATED_GETPID -lwasi-emulated-getpid \
            -D_GNU_SOURCE -DNO_MATHOMS \
            -Wno-null-pointer-arithmetic \
            -D_WASI_EMULATED_SIGNAL -lwasi-emulated-signal \
            -include /opt/wasi-sdk/share/wasi-sysroot/include/wasm32-wasi/fcntl.h \
            -I${{ github.workspace }}/stubs \
            -I. \
            -lwasi-emulated-mman
          
          wasic -o perlwasi -flto=full -static wasiperl.o stubs.o \
            -mllvm -wasm-enable-sjlj -Wl,-mllvm,-wasm-enable-sjlj \
            -Wl,--whole-archive libperl.a -Wl,--no-whole-archive \
            lib/auto/mro/mro.a \
            lib/auto/Devel/Peek/Peek.a \
            lib/auto/File/DosGlob/DosGlob.a \
            lib/auto/File/Glob/Glob.a \
            lib/auto/Sys/Syslog/Syslog.a \
            lib/auto/Sys/Hostname/Hostname.a \
            lib/auto/PerlIO/via/via.a \
            lib/auto/PerlIO/mmap/mmap.a \
            lib/auto/PerlIO/encoding/encoding.a \
            lib/auto/B/B.a \
            lib/auto/attributes/attributes.a \
            lib/auto/Unicode/Normalize/Normalize.a \
            lib/auto/Unicode/Collate/Collate.a \
            lib/auto/threads/threads.a \
            lib/auto/threads/shared/shared.a \
            lib/auto/IPC/SysV/SysV.a \
            lib/auto/re/re.a \
            lib/auto/Digest/MD5/MD5.a \
            lib/auto/Digest/SHA/SHA.a \
            lib/auto/SDBM_File/SDBM_File.a \
            lib/auto/Math/BigInt/FastCalc/FastCalc.a \
            lib/auto/Data/Dumper/Dumper.a \
            lib/auto/I18N/Langinfo/Langinfo.a \
            lib/auto/Time/Piece/Piece.a \
            lib/auto/IO/IO.a \
            lib/auto/Hash/Util/FieldHash/FieldHash.a \
            lib/auto/Hash/Util/Util.a \
            lib/auto/Filter/Util/Call/Call.a \
            lib/auto/Encode/Unicode/Unicode.a \
            lib/auto/Encode/Encode.a \
            lib/auto/Encode/JP/JP.a \
            lib/auto/Encode/KR/KR.a \
            lib/auto/Encode/EBCDIC/EBCDIC.a \
            lib/auto/Encode/CN/CN.a \
            lib/auto/Encode/Symbol/Symbol.a \
            lib/auto/Encode/Byte/Byte.a \
            lib/auto/Encode/TW/TW.a \
            lib/auto/Compress/Raw/Zlib/Zlib.a \
            lib/auto/Compress/Raw/Bzip2/Bzip2.a \
            lib/auto/MIME/Base64/Base64.a \
            lib/auto/Cwd/Cwd.a \
            lib/auto/Storable/Storable.a \
            lib/auto/List/Util/Util.a \
            lib/auto/Fcntl/Fcntl.a \
            lib/auto/Opcode/Opcode.a \
            `cat ext.libs` \
            -lm \
            -lwasi-emulated-signal \
            -lwasi-emulated-getpid \
            -lwasi-emulated-process-clocks \
            -lwasi-emulated-mman \
            -lsetjmp \
            -D_GNU_SOURCE -DNO_MATHOMS -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 \
            -v -ferror-limit=0

           wasm-opt perlwasi --translate-to-exnref -all -o perl.wasm

           cp -rv ../native/prefix/lib/perl5/site_perl/5.40.0/Image ./prefix/lib/perl5/5.40.0/wasm32-wasi/
           cp -rv ../native/prefix/lib/perl5/site_perl/5.40.0/File ./prefix/lib/perl5/5.40.0/wasm32-wasi/

            
      - name: Test WASI perl with wasmtime
        if: success()
        shell: bash
        run: |
          cd wasm
          # Attempt to run a simple script:
          # We'll map the current directory into the WASI filesystem via --mapdir
          echo 'print "hello from WASI perl\n";' > test.pl
          wasmtime run --mapdir=.:. prefix/bin/perl -- test.pl || echo "Command failed, continuing"
          
          # Check @INC
          wasmtime run --mapdir=.:. prefix/bin/perl -- -e 'print(join(":",@INC),"\n")' || echo "Command failed, continuing"
          # Try loading Image::ExifTool
          wasmtime run --mapdir=.:. prefix/bin/perl -- -e 'use Image::ExifTool; print("ExifTool loaded successfully\n")' || echo "Command failed, continuing"
      - name: Upload Prefix (WASI build)
        uses: actions/upload-artifact@v4
        with:
          name: perl-wasi-prefix
          path: wasm/prefix

      - name: Upload Additional Artifacts
        uses: actions/upload-artifact@v4
        with:
          path: |
            wasm/config.h
            wasm/perl.wasm
            wasm/perlwasi
