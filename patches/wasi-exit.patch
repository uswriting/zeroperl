diff --git a/cop.h b/cop.h
index 0de251b6e7..5e887897ed 100644
--- a/cop.h
+++ b/cop.h
@@ -125,15 +125,7 @@ typedef struct jmpenv JMPENV;
         });                                                             \
         cur_env.je_prev = PL_top_env;					\
         JE_OLD_STACK_HWM_save(cur_env);                                 \
-        /* setjmp() is callable in limited contexts which does not */	\
-        /* include assignment, so switch() instead */			\
-        switch (PerlProc_setjmp(cur_env.je_buf, SCOPE_SAVES_SIGNAL_MASK)) { \
-        case 0: cur_env.je_ret = 0; break;				\
-        case 1: cur_env.je_ret = 1; break;				\
-        case 2: cur_env.je_ret = 2; break;				\
-        case 3: cur_env.je_ret = 3; break;				\
-        default: Perl_croak(aTHX_ "panic: unexpected setjmp() result\n"); \
-        }								\
+        cur_env.je_ret = 0;						\
         JE_OLD_STACK_HWM_restore(cur_env);                              \
         PL_top_env = &cur_env;						\
         cur_env.je_mustcatch = FALSE;					\
@@ -151,10 +143,10 @@ typedef struct jmpenv JMPENV;
 #define JMPENV_POP \
     STMT_START {							\
         DEBUG_l({                                                       \
-            int i = -1; JMPENV *p = PL_top_env;				\
+            int i = -1; JMPENV *p = PL_top_env;                         \
             while (p) { i++; p = p->je_prev; }				\
-            Perl_deb(aTHX_ "JMPENV_POP level=%d in %s at %s:%d\n",        \
-                         i, SAFE_FUNCTION__, __FILE__, __LINE__);})        \
+            Perl_deb(aTHX_ "JMPENV_POP level=%d in %s at %s:%d\n",     \
+                         i, SAFE_FUNCTION__, __FILE__, __LINE__);})     \
         assert(PL_top_env == &cur_env);					\
         PL_delaymagic = cur_env.je_old_delaymagic;			\
         PL_top_env = cur_env.je_prev;					\
@@ -169,12 +161,12 @@ typedef struct jmpenv JMPENV;
                          (int)(v), i, SAFE_FUNCTION__, __FILE__, __LINE__);})   \
         if (PL_top_env->je_prev) {				\
             assert((v) >= 0 && (v) <= 3);			\
-            PerlProc_longjmp(PL_top_env->je_buf, (v));		\
+            __wasi_proc_exit(((v) == 2) ? STATUS_EXIT : 1);		\
         }    							\
         if ((v) == 2)						\
-            PerlProc_exit(STATUS_EXIT);		                \
+            __wasi_proc_exit(STATUS_EXIT);		                \
         PerlIO_printf(PerlIO_stderr(), "panic: top_env, v=%d\n", (int)(v)); \
-        PerlProc_exit(1);					\
+        __wasi_proc_exit(1);					\
     } STMT_END
 
 #define CATCH_GET		(PL_top_env->je_mustcatch)
